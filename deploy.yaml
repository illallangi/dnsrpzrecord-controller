---
apiVersion: v1
data:
  Corefile: |-
    .:53 {
      auto {
        directory /etc/coredns/zones/ (.*) {1}
      }
      errors
      health :8081 {
        lameduck 5s
      }
      log
      ready
      reload
      loadbalance
      transfer {
        to 192.168.0.1
      }
    }
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: dnsrpzrecord
  name: dnsrpzrecord-controller
  namespace: network-system

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: dnsrpzrecord
  name: dnsrpzrecord-controller
  namespace: network-system

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    configmap.reloader.stakater.com/reload: dnsrpzrecord-controller
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: dnsrpzrecord
  name: dnsrpzrecord-controller
  namespace: network-system
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/name: dnsrpzrecord
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/name: dnsrpzrecord
    spec:
      containers:
      - args:
        - -conf
        - /etc/coredns/Corefile
        image: coredns/coredns:1.8.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /health
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: coredns
        ports:
        - containerPort: 53
          name: dns
          protocol: TCP
        - containerPort: 9153
          name: metrics
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /ready
            port: 8181
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            memory: 170Mi
          requests:
            cpu: 100m
            memory: 70Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - all
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /etc/coredns/Corefile
          name: config
          subPath: Corefile
          readOnly: true
        - mountPath: /etc/coredns/zones
          name: scratch
          readOnly: true
      - image: ghcr.io/illallangi/dnsrpzrecord-controller:latest
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
        name: controller
        ports:
        - containerPort: 8080
          name: web
          protocol: TCP
        volumeMounts:
        - mountPath: /etc/coredns/Corefile
          name: config
          subPath: Corefile
          readOnly: true
        - mountPath: /etc/coredns/zones
          name: scratch
      serviceAccount: dnsrpzrecord-controller
      serviceAccountName: dnsrpzrecord-controller
      volumes:
      - name: config
        configMap:
          name: dnsrpzrecord-controller
      - emptyDir: {}
        name: scratch

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: dnsrpzrecord
  name: dnsrpzrecord-controller
  namespace: network-system
spec:
  externalTrafficPolicy: Local
  ports:
  - name: dns
    port: 53
    protocol: TCP
  selector:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: dnsrpzrecord
  type: LoadBalancer

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: dnsrpzrecord
  name: dnsrpzrecord-controller
rules:
- apiGroups:
  - ''
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - controllers.illallangi.enterprises
  resources:
  - dnsrpzrecords
  verbs:
  - get
  - list
  - watch

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: dnsrpzrecord
  name: dnsrpzrecord-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dnsrpzrecord-controller
subjects:
- kind: ServiceAccount
  name: dnsrpzrecord-controller
  namespace: network-system
